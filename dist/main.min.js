/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scss/style.scss":
/*!*************************!*\
  !*** ./scss/style.scss ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://css-gradients/./scss/style.scss?");

/***/ }),

/***/ "./src/App.js":
/*!********************!*\
  !*** ./src/App.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Shapes\": () => (/* binding */ Shapes),\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _Gradient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Gradient */ \"./src/Gradient.js\");\n\r\n\r\nclass App {\r\n    constructor(){\r\n        this.build()\r\n        this.bind()\r\n    }\r\n\r\n    build(){\r\n        this.gradients = []\r\n        this.container = document.getElementById('app')\r\n        this.gradientTypes = _Gradient__WEBPACK_IMPORTED_MODULE_0__.Gradients\r\n        this.gradientTypeSelect = this.container.querySelector('[name=\"gradientType\"')\r\n\r\n        /*this.gradientTypes.map(type => {\r\n            this.gradientTypeSelect.appendChild(new Option(type.name, type.name))\r\n        })*/\r\n\r\n        Shapes.map(shape => {\r\n            this.gradientTypeSelect.appendChild(new Option(shape.name, shape.name))\r\n        })\r\n\r\n        this.addGradientButton = this.container.querySelector(\"#addGradient\")\r\n        this.gradientContainer = this.container.querySelector(\".gradients\")\r\n    \r\n        this.pattern = this.container.querySelector('#pattern .preview')\r\n        this.result = this.container.querySelector('#result .preview')\r\n\r\n        this.codePreview = this.container.querySelector(\"#result code\")\r\n\r\n    }\r\n    \r\n    bind(){\r\n        this.addGradientButton.addEventListener('click', ()=>{\r\n            //this.newGradient(this.gradientTypes.filter(t => t.name == this.gradientTypeSelect.value)[0])\r\n            let shape = Shapes.filter(t => t.name == this.gradientTypeSelect.value)[0]\r\n            this.fromCss(shape.css)\r\n        })\r\n    }\r\n\r\n    fromCss(css){\r\n        let properties = Object.fromEntries(\r\n            css\r\n            .replace(/\\r/g, \" \")\r\n            .replace(/\\n/g, \" \")\r\n            .replace(/  /g, \" \")\r\n            .split(\";\")\r\n            .map(str => str.trim())\r\n            .filter(v => v)\r\n            .map(v => [v.split(':')[0].trim(), v.split(':')[1].trim()])\r\n        )\r\n        properties['background-image'] = properties['background-image'] ? properties['background-image'] : properties['background']\r\n        properties['background-size'] = properties['background-size'] ? properties['background-size'].split(',') : []\r\n        properties['background-position'] = properties['background-position'] ? properties['background-position'].split(',') : []\r\n        properties['background-image'] = properties['background-image'] ? properties['background-image'].replace(/\\),/g, \")###\").split('###').map(v => v.trim()) : []     \r\n        let backgroundPosition = \"0% 0%\"\r\n        let backgroundSize = \"100% 100%\"\r\n        properties['background-image'].map((gradientCss, i)=> {\r\n            if(properties['background-position'] && properties['background-position'][i]) backgroundPosition = properties['background-position'][i]\r\n            if(properties['background-size'] && properties['background-size'][i]) backgroundSize = properties['background-size'][i]\r\n            let gradient = _Gradient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromCss(gradientCss)\r\n            gradient.fromCssSize(backgroundSize);\r\n            gradient.fromCssPosition(backgroundPosition);\r\n            let element = this.addGradient(gradient)\r\n            element.classList.toggle('hidden')\r\n        })\r\n    }\r\n\r\n    newGradient(gradientType){\r\n        let gradient = new gradientType()\r\n        this.addGradient(gradient)\r\n    }\r\n    addGradient(gradient){\r\n        let gradientType = gradient.constructor\r\n        let element = App.createElement('div', {className: \"gradient\"}, this.gradientContainer)\r\n        \r\n        let head = App.createElement('div', {className: \"head\"}, element)\r\n        let preview = App.createElement('figure', {className: \"preview\"}, head)\r\n        let pattern = App.createElement('figure', {className: \"pattern\"}, head)\r\n        let name = App.createElement(\"strong\", {innerHTML: gradientType.name}, head)\r\n        head.addEventListener('click', (e)=>{\r\n            if(e.target.tagName == \"BUTTON\") return;\r\n            element.classList.toggle('hidden')\r\n        })\r\n\r\n        let deleteButton = App.createElement(\"button\", {innerHTML: \"Remove\"}, head)\r\n        deleteButton.addEventListener('click', ()=>{\r\n            this.gradients.splice(this.gradients.indexOf(gradient), 1)\r\n            element.remove()\r\n            this.update()\r\n        })\r\n        let duplicateButton = App.createElement(\"button\", {innerHTML: \"Duplicate\"}, head)\r\n        duplicateButton.addEventListener('click', ()=>{\r\n            let newGradient = gradient.clone()\r\n            this.addGradient(newGradient)\r\n        })\r\n\r\n        let container = App.createElement(\"div\", {className: \"gradient-container\"}, element)\r\n        // additional fields\r\n        Object.values(gradient.fields).map(f => {\r\n            f.buildForm(container)\r\n            f.addEventListener('update', ()=> {\r\n                this.updatePreview(gradient, preview, pattern)\r\n                this.update()\r\n            })\r\n        })\r\n\r\n        // color stops \r\n        let colorStopsContainer = App.createElement(\"ul\", { className: \"color-stops\" }, container)\r\n        let addColorStopButton = App.createElement(\"button\", {className: \"addColorStop\", innerHTML: \"Add color stop\"}, container)\r\n        addColorStopButton.addEventListener('click', ()=>{\r\n            let colorStop = new _Gradient__WEBPACK_IMPORTED_MODULE_0__.ColorStop(\"\", \"#fff\", new gradient.colorStopValue())\r\n            gradient.colorStops.push(colorStop)\r\n            this.addColorStop(colorStop, colorStopsContainer, gradient, preview, pattern)\r\n        })\r\n        gradient.colorStops.map(cs => this.addColorStop(cs, colorStopsContainer, gradient, preview, pattern))\r\n\r\n        // position\r\n        let positionSize = App.createElement('div', {className: \"position-size\"}, container)\r\n        let position = App.createElement('div', {className: \"position\"}, positionSize)\r\n        App.createElement(\"div\", {innerHTML: \"position\"}, position)\r\n        gradient.position.map(v => {\r\n            v.buildForm(position)\r\n            v.addEventListener('update', ()=> {\r\n                this.updatePreview(gradient, preview, pattern)\r\n                this.update()\r\n            })\r\n        })\r\n        let size = App.createElement('div', {className: \"size\"}, positionSize)\r\n        App.createElement(\"div\", {innerHTML: \"size\"}, size)\r\n        gradient.size.map(v => {\r\n            v.buildForm(size)\r\n            v.addEventListener('update', ()=> {\r\n                this.updatePreview(gradient, preview, pattern)\r\n                this.update()\r\n            })\r\n        })\r\n\r\n        this.gradients.push(gradient)\r\n        this.updatePreview(gradient, preview, pattern)\r\n        this.update()\r\n\r\n        return element\r\n    }\r\n\r\n    addColorStop(colorStop, colorStopsContainer, gradient, preview, pattern){\r\n        let csForm = colorStop.buildForm(colorStopsContainer)\r\n\r\n        let buttonsContainer = App.createElement('div', {className: \"form\"}, csForm)\r\n        let removeButton = App.createElement('button', {innerHTML: \"Remove\"}, buttonsContainer)\r\n        removeButton.addEventListener('click', ()=>{\r\n            gradient.colorStops.remove(colorStop)\r\n            this.updatePreview(gradient, preview, pattern)\r\n            this.update()\r\n            csForm.remove()\r\n        })\r\n        let duplicateButton = App.createElement('button', {innerHTML: \"Duplicate\"}, buttonsContainer)\r\n        duplicateButton.addEventListener('click', ()=>{\r\n            let newCS = colorStop.clone()\r\n            gradient.colorStops.push(newCS)\r\n            this.addColorStop(newCS, colorStopsContainer, gradient, preview, pattern)\r\n        })\r\n\r\n        this.updatePreview(gradient, preview, pattern)\r\n        this.update()\r\n\r\n        colorStop.addEventListener('update', ()=> {\r\n            this.updatePreview(gradient, preview, pattern)\r\n            this.update()\r\n        })\r\n    }\r\n\r\n    update(){\r\n        let gradientStyle = this.gradients.map(gradient => gradient.toCss()).join(',')\r\n        this.pattern.style.backgroundImage = gradientStyle\r\n        this.result.style.backgroundImage = gradientStyle\r\n\r\n        let gradientPosition = this.gradients.map(gradient => gradient.toCssPosition()).join(',')\r\n        this.pattern.style.backgroundPosition = gradientPosition\r\n        this.result.style.backgroundPosition = gradientPosition\r\n\r\n        let gradientSize = this.gradients.map(gradient => gradient.toCssSize()).join(',')\r\n        this.result.style.backgroundSize = gradientSize\r\n\r\n        this.codePreview.innerHTML = `<strong>background-image</strong>: ${this.gradients.map(gradient => gradient.toCss()).join(',<br>')};`\r\n        this.codePreview.innerHTML += `<br><strong>background-size</strong>: ${gradientSize};`\r\n        this.codePreview.innerHTML += `<br><strong>background-position</strong>: ${gradientPosition};`\r\n        \r\n    }\r\n\r\n    updatePreview(gradient, preview, pattern){\r\n        preview.style.backgroundImage = gradient.toCss()\r\n        preview.style.backgroundPosition = gradient.toCssPosition()\r\n        preview.style.backgroundSize = gradient.toCssSize()\r\n        pattern.style.backgroundImage = gradient.toCss()\r\n    }\r\n\r\n    static createElement(tagName=\"div\", attr={}, parent=null){\r\n        let element = document.createElement(tagName)\r\n        for(let key in attr) element[key] = attr[key]\r\n        if(parent) parent.appendChild(element)\r\n        return element\r\n    }\r\n\r\n    \r\n}\r\n\r\nconst Shapes = [\r\n    {\r\n        name: \"Linear Gradient\",\r\n        css: `\r\n            background-image: linear-gradient(0deg, transparent 0%, white 100%);\r\n            background-size: 100% 100%;\r\n            background-position: 0% 0%;\r\n        `\r\n    },\r\n    {\r\n        name: \"Radial Gradient\",\r\n        css: `\r\n            background-image: radial-gradient(circle at 50% 50%, white 0%, transparent 100%);\r\n            background-size: 100% 100%;\r\n            background-position: 50% 50%;\r\n        `\r\n    },\r\n    {\r\n        name: \"Conic Gradient\",\r\n        css: `\r\n            background-image: conic-gradient(from 0deg at 50% 50%, white 0deg, transparent 360deg);\r\n            background-size: 100% 100%;\r\n            background-position: 50% 50%;\r\n        `\r\n    },\r\n    {\r\n        name: \"Grid\",\r\n        css: `\r\n            background-image: linear-gradient(0deg, transparent 90%, #fff 90%),\r\n            linear-gradient(-90deg, transparent 90%, #fff 90%);\r\n            background-size: 10px 10px,10px 10px;\r\n            background-position: 0% 0%,0% 0%;\r\n        `\r\n    },\r\n    {\r\n        name: \"Square\",\r\n        css: `\r\n            background-image: conic-gradient(from -90deg at 50% 50%, white 0deg, white 90deg, transparent 90deg);\r\n            background-size: 10px 10px;\r\n            background-position: 0% 0%;\r\n        `\r\n    },\r\n    {\r\n        name: \"Triangle\",\r\n        css: `\r\n            background-image: conic-gradient(from 150deg at 50% 25%, white 0deg, white 60deg, transparent 60deg);\r\n            background-size: 10px 10px;\r\n            background-position: 0% 0%;\r\n        `\r\n    },\r\n    {\r\n        name: \"Circle\",\r\n        css: `\r\n            background-image: radial-gradient(circle at 50% 50%, white 0%, white 50%, transparent 50%);\r\n            background-size: 10px 10px;\r\n            background-position: 50% 50%;\r\n        `\r\n    }\r\n]\n\n//# sourceURL=webpack://css-gradients/./src/App.js?");

/***/ }),

/***/ "./src/Gradient.js":
/*!*************************!*\
  !*** ./src/Gradient.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ColorStop\": () => (/* binding */ ColorStop),\n/* harmony export */   \"ColorValue\": () => (/* binding */ ColorValue),\n/* harmony export */   \"ConicGradient\": () => (/* binding */ ConicGradient),\n/* harmony export */   \"DegreeValue\": () => (/* binding */ DegreeValue),\n/* harmony export */   \"Gradients\": () => (/* binding */ Gradients),\n/* harmony export */   \"LinearGradient\": () => (/* binding */ LinearGradient),\n/* harmony export */   \"RadialGradient\": () => (/* binding */ RadialGradient),\n/* harmony export */   \"SelectValue\": () => (/* binding */ SelectValue),\n/* harmony export */   \"UnitValue\": () => (/* binding */ UnitValue),\n/* harmony export */   \"Value\": () => (/* binding */ Value),\n/* harmony export */   \"default\": () => (/* binding */ Gradient)\n/* harmony export */ });\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App */ \"./src/App.js\");\n\r\n\r\nclass Gradient {\r\n    constructor(cssName=\"\"){\r\n        this.cssName = cssName\r\n        this.colorStops = []\r\n        this.colorStopValue = null\r\n        this.fields = {} // additionalFields\r\n        this.position = [new UnitValue(\"x\"), new UnitValue(\"y\")]\r\n        this.size = [new UnitValue(\"width\", 100), new UnitValue(\"height\", 100)]\r\n    }\r\n\r\n    clone(){\r\n        let newGradient = new this.constructor()\r\n        newGradient.fromCss(this.toCss())\r\n        newGradient.fromCssPosition(this.toCssPosition())\r\n        newGradient.fromCssSize(this.toCssSize())\r\n        return newGradient\r\n    }\r\n\r\n    toCssPosition(){\r\n        return this.position.map(f => f.toCss()).join(' ')\r\n    }\r\n    toCssSize(){\r\n        return this.size.map(f => f.toCss()).join(' ')\r\n    }\r\n\r\n    toCss(){\r\n        return `${this.cssName}()`\r\n    }\r\n\r\n    addColorStop(){\r\n        let cs = new ColorStop(\"\", \"\", new this.colorStopValue())\r\n        this.colorStops.push(cs)\r\n        return cs\r\n    }\r\n\r\n    static fromCss(cssString){\r\n        let gradients = Gradients.map(g => new g())\r\n        let matches = gradients.filter(g => cssString.match(g.cssName))\r\n        if(!matches) return null;\r\n        let gradient = matches[0]\r\n        return gradient.fromCss(cssString)\r\n    }\r\n    \r\n    fromCss(cssValue){\r\n        /*  */\r\n    }\r\n\r\n    fromCssPosition(cssPosition){\r\n        this.position[0].fromCss(cssPosition.split(' ')[0])\r\n        this.position[1].fromCss(cssPosition.split(' ')[1])\r\n    }\r\n    fromCssSize(cssSize){\r\n        this.size[0].fromCss(cssSize.split(' ')[0])\r\n        this.size[1].fromCss(cssSize.split(' ')[1])\r\n    }\r\n}\r\n\r\nclass LinearGradient extends Gradient{\r\n    constructor(){\r\n        super(\"linear-gradient\")\r\n        this.fields = {\r\n            direction: new DegreeValue(\"direction\")\r\n        }\r\n        this.colorStopValue = UnitValue\r\n    }\r\n\r\n    toCss(){\r\n        let colorStops = this.colorStops.map(c => c.toCss()).join(', ')\r\n        colorStops = colorStops ? ', ' + colorStops : \"\";\r\n        return `${this.cssName}(${this.fields.direction.toCss()}${colorStops})`\r\n    }\r\n\r\n    fromCss(cssValue){\r\n        cssValue = cssValue.replace(/^[^\\(]*?\\(/, \"\").replace(/\\)$/, \"\")\r\n        let values = cssValue.replace(/([^0-9\\.]),/g, \"$1___\").split(\"___\")\r\n\r\n        this.fields.direction.fromCss(values[0])\r\n        values.shift()\r\n        values.map(value => {\r\n            let cs = this.addColorStop()\r\n            cs.fromCss(value)\r\n        })\r\n        return this\r\n    }\r\n}\r\n\r\nclass RadialGradient extends Gradient {\r\n    constructor(){\r\n        super(\"radial-gradient\")\r\n        this.position = [new UnitValue(\"x\", 50), new UnitValue(\"y\", 50)]\r\n        this.fields = {\r\n            shape: new SelectValue(\"shape\", \"\", [\"\", \"circle\"]),\r\n            positionX: new UnitValue(\"x\", 50),\r\n            positionY: new UnitValue(\"y\", 50),\r\n        }\r\n        this.colorStopValue = UnitValue\r\n    }\r\n    toCss(){\r\n        let colorStops = this.colorStops.map(c => c.toCss()).join(', ')\r\n        colorStops = colorStops ? ', ' + colorStops : \"\";\r\n        let position = this.fields.positionX.toCss()  + \" \" + this.fields.positionY.toCss()\r\n        return `${this.cssName}(${this.fields.shape.toCss()} at ${position}${colorStops})`\r\n    }\r\n\r\n    fromCss(cssValue){\r\n        cssValue = cssValue.replace(/^[^\\(]*?\\(/, \"\").replace(/\\)$/, \"\")\r\n        let values = cssValue.replace(/([^0-9\\.]),/g, \"$1___\").split(\"___\")\r\n        let shapeAndPosition = values[0]\r\n        let shape = shapeAndPosition.split(\" at \")[0]\r\n        let position = shapeAndPosition.split(\" at \")[1]\r\n        this.fields.shape.fromCss(shape)\r\n        this.fields.positionX.fromCss(position.split(\" \")[0])\r\n        this.fields.positionY.fromCss(position.split(\" \")[1])\r\n        values.shift()\r\n        values.map(value => {\r\n            let cs = this.addColorStop()\r\n            cs.fromCss(value)\r\n        })\r\n        return this\r\n    }\r\n}\r\n\r\nclass ConicGradient extends Gradient {\r\n    constructor(){\r\n        super(\"conic-gradient\")\r\n        this.position = [new UnitValue(\"x\", 50), new UnitValue(\"y\", 50)]\r\n        this.fields = {\r\n            from: new DegreeValue(\"from\", 0),\r\n            positionX: new UnitValue(\"x\", 50),\r\n            positionY: new UnitValue(\"y\", 50),\r\n        }\r\n        this.colorStopValue = DegreeValue\r\n    }\r\n\r\n    toCss(){\r\n        let colorStops = this.colorStops.map(c => c.toCss()).join(', ')\r\n        colorStops = colorStops ? ', ' + colorStops : \"\";\r\n        let position = this.fields.positionX.toCss()  + \" \" + this.fields.positionY.toCss()\r\n        return `${this.cssName}(from ${this.fields.from.toCss()} at ${position}${colorStops})`\r\n    }\r\n\r\n    fromCss(cssValue){\r\n        cssValue = cssValue.replace(/^[^\\(]*?\\(/, \"\").replace(/\\)$/, \"\")\r\n        let values = cssValue.replace(/([^0-9\\.]),/g, \"$1___\").split(\"___\")\r\n        let fromAndPosition = values[0]\r\n        let from = fromAndPosition.split(' at ')[0].replace(/^from /, \"\").trim()\r\n        let position = fromAndPosition.split(' at ')[1]\r\n        this.fields.from.fromCss(from)\r\n        this.fields.positionX.fromCss(position.split(\" \")[0])\r\n        this.fields.positionY.fromCss(position.split(\" \")[1])\r\n        values.shift()\r\n        values.map(value => {\r\n            let cs = this.addColorStop()\r\n            cs.fromCss(value)\r\n        })\r\n        return this\r\n    }\r\n}\r\n\r\nclass Value extends EventTarget {\r\n    constructor(label=\"\", value=0){\r\n        super()\r\n        this.label = label\r\n        this.value = value\r\n        this.slideControl = false \r\n    }\r\n    toCss(){\r\n        return this.value\r\n    }\r\n\r\n    buildForm(container){\r\n        let form = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', {className: \"form\"}, container)\r\n        if(this.label) this.createLabel(form)\r\n        this.createFields(form)\r\n        form.querySelectorAll('input,select').forEach(input => input.addEventListener('input', ()=>{\r\n            this.updateValue()\r\n            this.dispatchEvent(new CustomEvent('update'))\r\n        }))\r\n        return form\r\n    }\r\n\r\n    createFields(form){\r\n        this.input = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('input', {value: this.value, step: 0.1}, form)\r\n    }\r\n\r\n    createLabel(form){\r\n        this.label = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('span', {innerHTML: this.label, className: this.slideControl ? \"slide-control\" : \"\"}, form)\r\n        if(this.slideControl){\r\n            let mouseX = null\r\n            let startValue = null\r\n            const bindMouseMove = (e)=>{\r\n                this.value = startValue + (e.pageX - mouseX) * (this.input.step || 1)\r\n                this.value = this.value.toFixed(1)\r\n                this.input.value = this.value\r\n                this.dispatchEvent(new CustomEvent('update'))\r\n            }\r\n            this.label.addEventListener('mousedown', (e)=>{\r\n                mouseX = e.pageX\r\n                startValue = parseFloat(this.value)\r\n                window.addEventListener('mousemove', bindMouseMove)\r\n                window.addEventListener('mouseup', ()=> window.removeEventListener(\"mousemove\", bindMouseMove))\r\n                window.addEventListener('mouseleave', ()=> window.removeEventListener(\"mousemove\", bindMouseMove))\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    updateValue(){\r\n        this.value = this.input.value\r\n    }\r\n\r\n    fromCss(value){\r\n        this.value = value\r\n    }\r\n}\r\n\r\nclass ColorValue extends Value {\r\n    createFields(form){\r\n        this.preview = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('figure', {className: \"color-preview\"}, form)\r\n        super.createFields(form)\r\n        this.preview.style.background = this.input.value\r\n        this.addEventListener('update', ()=>{\r\n            this.preview.style.background = this.input.value\r\n        })\r\n    }\r\n}\r\n\r\nclass ColorStop extends Value {\r\n    constructor(label, color=\"#fff\", stopValue=null){\r\n        super(label, color)\r\n        this.color = new ColorValue(\"\", color)\r\n        this.stopValue = stopValue\r\n    }\r\n\r\n    createFields(form){\r\n        form.className = \"color-stop\"\r\n        this.color.buildForm(form)\r\n        if(this.stopValue) this.stopValue.buildForm(form)\r\n    }\r\n\r\n    toCss(){\r\n        return this.color.toCss() + (this.stopValue ? \" \" + this.stopValue.toCss() : \"\")\r\n    }\r\n\r\n    updateValue(){\r\n    }\r\n\r\n    fromCss(cssValue){\r\n        cssValue = cssValue.replace(/, /g, \",\")\r\n        let values = cssValue.trim().split(\" \")\r\n        this.color.fromCss(values[0])\r\n        this.stopValue.fromCss(values[1])\r\n    }\r\n\r\n    clone(){\r\n        return new ColorStop(this.label, this.color.value, this.stopValue)\r\n    }\r\n}\r\n\r\n\r\n\r\nclass DegreeValue extends Value {\r\n    constructor(label, value){\r\n        super(label, value)\r\n        this.slideControl = true\r\n    }\r\n    createFields(form){\r\n        this.input = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('input', {\r\n            type: \"number\",\r\n            value: this.value,\r\n            min: -180,\r\n            max: 180,\r\n            step: 0.1\r\n        }, form)\r\n    }\r\n    toCss(){\r\n        return this.value + \"deg\"\r\n    }\r\n    fromCss(cssValue){\r\n        this.value = parseFloat(cssValue)\r\n    }\r\n}\r\n\r\nclass SelectValue extends Value {\r\n    constructor(label, value, units=[]){\r\n        super(label, value)\r\n        this.units = units\r\n    }\r\n    createFields(form){\r\n        this.input = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"select\", {}, form)\r\n        this.units.map(unit => this.input.appendChild(new Option(unit, unit, unit == this.unit, unit == this.unit)))\r\n    }\r\n    updateValue(){\r\n        this.value = this.input.value\r\n    }\r\n}\r\n\r\nclass UnitValue extends Value {\r\n    constructor(label, value=0, units=null){\r\n        super(label, value)\r\n        this.value = value\r\n        this.units = units || [\"%\", \"px\",\"rem\"]\r\n        this.unit = this.units[0]\r\n        this.slideControl = true\r\n    }\r\n    createFields(form){\r\n        this.input = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('input', {\r\n            type: \"number\",\r\n            value: this.value,\r\n            step: 0.1\r\n        }, form)\r\n        this.inputUnit = _App__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"select\", {}, form)\r\n        this.units.map(unit => this.inputUnit.appendChild(new Option(unit, unit, unit == this.unit, unit == this.unit)))\r\n    }\r\n    updateValue(){\r\n        this.value = this.input.value\r\n        this.unit = this.inputUnit.value\r\n    }\r\n    toCss(){\r\n        return this.value + this.unit\r\n    }\r\n    fromCss(css){\r\n        this.value = parseFloat(css)\r\n        this.unit = css.match(/[a-z%]/g).join('')\r\n    }\r\n}\r\n\r\nconst Gradients = [\r\n    LinearGradient,\r\n    RadialGradient,\r\n    ConicGradient\r\n]\n\n//# sourceURL=webpack://css-gradients/./src/Gradient.js?");

/***/ }),

/***/ "./src/extensions.js":
/*!***************************!*\
  !*** ./src/extensions.js ***!
  \***************************/
/***/ (() => {

eval("Array.prototype.remove = function(element){\r\n    return this.splice(this.indexOf(element), 1)\r\n}\n\n//# sourceURL=webpack://css-gradients/./src/extensions.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/style.scss */ \"./scss/style.scss\");\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extensions */ \"./src/extensions.js\");\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_extensions__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./App */ \"./src/App.js\");\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', ()=>{\r\n    let app = new _App__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\r\n   \r\n    \r\n   // conic\r\n   app.fromCss(`\r\n   background-image: conic-gradient(from 150deg at 50% 10%, #ffd100 0deg, #ffd100 60deg, transparent 60deg), linear-gradient(0deg, teal 0%, transparent 100%), conic-gradient(from -30deg at 50% 85%, orange 0deg, orange 60deg, transparent 60deg);\r\n   background-size: 2rem 2rem,100% 1rem,2rem 2rem;\r\n   background-position: 0% 0%,0% 0%,0% 0%;\r\n   `)\r\n   \r\n\r\n})\n\n//# sourceURL=webpack://css-gradients/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;